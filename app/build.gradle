apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'


///是否需要测试 CMake
def needCMakeTest = false

android {
    compileSdk 34
    defaultConfig {
        applicationId "com.shuyu.github.kotlin"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 10
        versionName "1.1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                //includeCompileClasspath = true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        buildConfigField "String", "CLIENT_ID", properties.getProperty("CLIENT_ID")
        buildConfigField "String", "CLIENT_SECRET", properties.getProperty("CLIENT_SECRET")
        buildConfigField "boolean", "NEED_CMAKE_TEST", "$needCMakeTest"

        if (needCMakeTest) {
            //CMake
            externalNativeBuild {
                cmake {
                    cppFlags ""
                }
                ndk {
                    abiFilters 'arm64-v8a'
                }
            }
        }

        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    if (needCMakeTest) {
        externalNativeBuild {
            cmake {
                path 'CMakeLists.txt'
            }
        }
    }


    /*sourceSets {
        main {
            //CMake 增加jniLibs源文件夹
            jniLibs.srcDirs = ['../distribution/libs']
        }
    }*/

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
        javacOptions {
            // 增加错误提示
            option("-Xmaxerrs", 500)
        }
    }

    kotlinOptions {
        freeCompilerArgs += [
                "-Xjvm-default=all",
        ]
    }
    //打开 dataBinding 和 viewBinding
    buildFeatures {
        dataBinding true
        viewBinding true
    }


    signingConfigs {
        debug {
            storeFile file("../gsygithubapp-debug.jks")
            storePassword "123456"
            keyAlias "debug"
            keyPassword "123456"
        }
        release {
            storeFile file("../gsygithubapp-debug.jks")
            storePassword "123456"
            keyAlias "debug"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
        }
    }

    lintOptions {
        abortOnError false
    }

    //针对编辑错误
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }
    packagingOptions {
        exclude 'META-INF/library-core_release.kotlin_module'
    }
    buildFeatures {
        aidl true
    }
    namespace 'com.shuyu.github.kotlin'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //kotlin plugin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"

    //androidx
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.recyclerview:recyclerview:${android_support}"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat"
    implementation "androidx.legacy:legacy-support-v4:$android_other_version"
    implementation "androidx.annotation:annotation:$android_other_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    kapt("org.xerial:sqlite-jdbc:3.34.0") //追加这条
    kapt 'androidx.lifecycle:lifecycle-compiler:2.4.1'
    implementation 'androidx.room:room-runtime:2.4.2'
    kapt 'androidx.room:room-compiler:2.4.2'
    implementation "com.google.android.material:material:1.6.1"


    //constraint
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    //navigation
    implementation 'androidx.navigation:navigation-fragment:2.5.2'
    implementation 'androidx.navigation:navigation-ui:2.5.2'


    //dagger
    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    implementation "com.google.dagger:dagger-android-support:${dagger_version}"
    kapt "com.google.dagger:dagger-android-processor:${dagger_version}"

    //HTTP retrofit2
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp3_version}"
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit_version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-scalars:${retrofit_version}"
    implementation("com.squareup.retrofit2:converter-simplexml:${retrofit_version}") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }

    ///ARouter
    implementation "com.alibaba:arouter-api:${arouter_api_versoion}"
    kapt "com.alibaba:arouter-compiler:${arouter_compiler_versoion}"


    //RxJava
    implementation "io.reactivex.rxjava2:rxandroid:${rx_android}"
    implementation "io.reactivex.rxjava2:rxjava:${rx_version}"

    //eventbus
    implementation "org.greenrobot:eventbus:${event_bus}"

    //glide
    implementation "com.github.bumptech.glide:glide:${image_load}"
    kapt "com.github.bumptech.glide:compiler:${image_load}"


    ///webview
    implementation "com.just.agentweb:agentweb:${agentweb_version}"
    implementation "com.just.agentweb:download:${agentweb_version}"

    //TABBAR
    implementation "devlight.io:navigationtabbar:${tabbar_version}"

    //iconics
    implementation "com.mikepenz:iconics-core:${iconics_version}"
    implementation "com.mikepenz:iconics-views:${iconics_version}"
    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.6-kotlin@aar'
    implementation 'com.mikepenz:fontawesome-typeface:5.9.0.0-kotlin@aar'
    implementation 'com.mikepenz:community-material-typeface:3.5.95.1-kotlin@aar'
    implementation 'com.mikepenz:octicons-typeface:3.2.0.6-kotlin@aar'
    implementation 'com.mikepenz:weather-icons-typeface:2.0.10.5-kotlin@aar'
    implementation 'com.mikepenz:foundation-icons-typeface:3.0.0.5-kotlin@aar'
    implementation 'com.mikepenz:ionicons-typeface:2.0.1.5-kotlin@aar'


    //EDIT TEXT
    implementation "com.github.HITGIF:TextFieldBoxes:${textfiled_box_version}"


    ///loading spinkits
    implementation "com.github.ybq:Android-SpinKit:${spinkit_version}"

    ///recycler adapter
    implementation "com.github.CarGuo.LazyRecyclerAdapter:CommonRecycler-Kotlin:${recycler_common_version}"

    ///drop menu
    implementation "com.github.dongjunkun:DropDownMenu:${drop_menu_version}"

    ///markdown
    implementation "com.github.tiagohm.MarkdownView:library:${richtext_version}"
    implementation "io.noties.markwon:core:${markwon_version}"
    implementation "io.noties.markwon:html:${markwon_version}"
    implementation "io.noties.markwon:recycler:$markwon_version"
    implementation "io.noties.markwon:recycler-table:$markwon_version"
    implementation "io.noties.markwon:linkify:$markwon_version"
    implementation "io.noties.markwon:image:$markwon_version"
    implementation "io.noties.markwon:image-glide:$markwon_version"
    implementation ("io.noties.markwon:syntax-highlight:$markwon_version") {
        exclude group: 'org.jetbrains', module: 'annotations-java5'
    }


    ///Prism4j
    kapt "io.noties:prism4j-bundler:${prism4j_version}"

    ///dialogplus
    implementation "com.orhanobut:dialogplus:${dialogplus_version}"

    ///Drawer
    implementation "com.mikepenz:materialdrawer:7.0.0-rc08"
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"

    ///lottie
    implementation "com.airbnb.android:lottie:${lottie_version}"


    ///bugly
    implementation "com.tencent.bugly:crashreport:${bugly_version}"

    ///PHOTO VIEW
    implementation "com.github.chrisbanes:PhotoView:${photoview_version}"

    implementation "org.permissionsdispatcher:permissionsdispatcher:${permission_version}"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:${permission_version}"

    implementation "androidx.startup:startup-runtime:1.1.1"
}



// 在你的模块级别 build.gradle 文件中添加此任务
// 例如: app/build.gradle

task findSoFileOrigins {
    description = "扫描项目依赖的 AAR 文件，找出 .so 文件的来源。"
    group = "reporting" // 将任务归类到 "reporting" 组下

    doLast {
        // 用于存储 AAR 标识符及其包含的 .so 文件路径
        // 键 (Key): AAR 的字符串标识符 (例如："project :gsyVideoPlayer", "com.example.library:core:1.0.0")
        // 值 (Value): 一个 Set 集合，包含该 AAR 内所有 .so 文件的路径 (字符串)
        def aarSoFilesMap = [:]

        def variants = null
        if (project.plugins.hasPlugin('com.android.application')) {
            variants = project.android.applicationVariants
        } else if (project.plugins.hasPlugin('com.android.library')) {
            variants = project.android.libraryVariants
        } else {
            project.logger.warn("警告: findSoFileOrigins 任务需要 Android 应用插件 (com.android.application) 或库插件 (com.android.library)。")
            return
        }

        if (variants == null || variants.isEmpty()) {
            project.logger.warn("警告: 未找到任何变体 (variants) 来处理。")
            return
        }

        variants.all { variant ->
            project.logger.lifecycle("正在扫描变体 '${variant.name}' 中的 AAR 依赖以查找 .so 文件...")

            // 获取该变体的运行时配置 (runtime configuration)
            def configuration = variant.getRuntimeConfiguration()

            try {
                // 配置一个构件视图 (artifact view) 来精确请求 AAR 类型的构件
                def resolvedArtifactsView = configuration.incoming.artifactView { view ->
                    view.attributes { attributes ->
                        // 明确指定我们只对 artifactType 为 'aar' 的构件感兴趣
                        // AGP 也常用 "android-aar"，如果 "aar" 效果不佳，可以尝试替换
                        attributes.attribute(Attribute.of("artifactType", String.class), "aar")
                    }
                    // lenient(false) 是默认行为。如果设为 true，它会尝试跳过无法解析的构件而不是让整个视图失败。
                    // 但如果像之前那样，是组件级别的变体选择失败 (如 gsyVideoPlayer)，lenient 可能也无法解决。
                    // view.lenient(false)
                }.artifacts // 获取 ResolvedArtifactSet

                project.logger.info("对于变体 '${variant.name}'，从配置 '${configuration.name}' 解析到 ${resolvedArtifactsView.artifacts.size()} 个 AAR 类型的构件。")

                resolvedArtifactsView.each { resolvedArtifactResult ->
                    // resolvedArtifactResult 是 ResolvedArtifactResult 类型的对象
                    File aarFile = resolvedArtifactResult.file
                    // 获取组件的标识符，这能告诉我们依赖的来源
                    // 例如："project :gsyVideoPlayer" 或 "com.google.android.material:material:1.7.0"
                    String aarIdentifier = resolvedArtifactResult.id.componentIdentifier.displayName

                    aarSoFilesMap.putIfAbsent(aarIdentifier, new HashSet<String>())

                    if (aarFile.exists() && aarFile.name.endsWith('.aar')) {
                        // project.logger.info("正在检查 AAR: ${aarIdentifier} (文件: ${aarFile.name})")
                        try {
                            project.zipTree(aarFile).matching {
                                include '**/*.so' // 匹配 AAR 中的所有 .so 文件
                            }.each { File soFileInZip ->
                                aarSoFilesMap[aarIdentifier].add(soFileInZip.path)
                            }
                        } catch (Exception e) {
                            project.logger.error("错误: 无法检查 AAR 文件 '${aarIdentifier}' (路径: ${aarFile.absolutePath})。原因: ${e.message}")
                        }
                    } else {
                        if (!aarFile.name.endsWith('.aar')) {
                            project.logger.debug("跳过非 AAR 文件 '${aarFile.name}' (来自: ${aarIdentifier})，其构件类型被解析为 AAR。")
                        } else {
                            project.logger.warn("警告: 来自 '${aarIdentifier}' 的 AAR 文件不存在: ${aarFile.absolutePath}")
                        }
                    }
                }

            } catch (Exception e) {
                // 这个 catch 块会捕获解析构件视图时发生的错误
                // 这可能仍然包括之前遇到的 "Could not resolve all artifacts for configuration" 错误，
                // 如果问题非常根本，即使是特定的构件视图也无法克服。
                project.logger.error("错误: 无法为配置 '${configuration.name}' 解析 AAR 类型的构件。" +
                        "可能项目设置中存在依赖变体匹配问题，" +
                        "详细信息: ${e.message}", e) // 打印异常堆栈以获取更多信息
                project.logger.error("建议: 请检查项目依赖（尤其是本地子项目如 ':xxxxx'）的构建配置，" +
                        "确保它们能正确地发布带有标准 Android 库属性（如组件类别、构建类型，以及适用的 Kotlin 平台类型等）的变体。")
                // 如果希望任务在此处停止而不是尝试其他变体，可以取消下一行的注释
                // throw e
            }
        }

        // 打印结果
        if (aarSoFilesMap.isEmpty()) {
            project.logger.lifecycle("\n在所有已处理变体的可解析 AAR 依赖中均未找到 .so 文件，或者依赖解析失败。")
        } else {
            println "\n--- AAR 依赖中的 .so 文件来源 ---"
            // 按 AAR 标识符排序以获得一致的输出
            aarSoFilesMap.sort { it.key }.each { aarId, soFileList ->
                if (!soFileList.isEmpty()) {
                    println "${aarId}:" // 例如：project :gsyVideoPlayer: 或 com.some.library:core:1.0:
                    soFileList.sort().each { soPath -> // 对 .so 文件路径排序
                        println "  - ${soPath}"     // 例如：  - jni/armeabi-v7a/libexample.so
                    }
                }
            }
            println "----------------------------------"
        }
        project.logger.lifecycle("任务执行完毕。要再次运行此任务，请执行: ./gradlew ${project.name}:${name}")
    }
}
